From 1ce5a3fd5b45dcd56db4195ceabd3a9ac0c1dc63 Mon Sep 17 00:00:00 2001
From: Khem Raj <raj.khem@gmail.com>
Date: Thu, 19 Dec 2024 12:45:35 -0800
Subject: [PATCH] Fix cargo build on riscv32

riscv32 support is added to latest rustix already
therefore this patch is limited to rustix-0.38.19
once cargo/rust moves beyond rustix-0.38.19 as dependency
we can remove this patch

Upstream-Status: Inappropriate [Specific to rustix-0.38.19]

Signed-off-by: Khem Raj <raj.khem@gmail.com>
---
 src/backend/libc/c.rs |  3 +++
 src/fs/ioctl.rs       | 16 ++++++++++++----
 2 files changed, 15 insertions(+), 4 deletions(-)

diff --git a/src/backend/libc/c.rs b/src/backend/libc/c.rs
index ec140a3..2881abc 100644
--- a/src/backend/libc/c.rs
+++ b/src/backend/libc/c.rs
@@ -6,6 +6,9 @@
 // things below.
 pub(crate) use libc::*;
 
+use linux_raw_sys::ioctl::FICLONE;
+use linux_raw_sys::ioctl::FS_IOC32_GETFLAGS;
+
 /// `PROC_SUPER_MAGIC`â€”The magic number for the procfs filesystem.
 #[cfg(all(linux_kernel, target_env = "musl"))]
 pub(crate) const PROC_SUPER_MAGIC: u32 = 0x0000_9fa0;
diff --git a/src/fs/ioctl.rs b/src/fs/ioctl.rs
index 718a2a4..9f619b9 100644
--- a/src/fs/ioctl.rs
+++ b/src/fs/ioctl.rs
@@ -50,7 +50,14 @@ pub fn ioctl_blkpbszget<Fd: AsFd>(fd: Fd) -> io::Result<u32> {
 ///  - [Linux]
 ///
 /// [Linux]: https://man7.org/linux/man-pages/man2/ioctl_ficlone.2.html
-#[cfg(all(linux_kernel, not(any(target_arch = "sparc", target_arch = "sparc64"))))]
+#[cfg(all(
+    linux_kernel,
+    not(any(
+        target_arch = "sparc",
+        target_arch = "sparc64",
+        target_arch = "riscv32"
+    ))
+))]
 #[inline]
 #[doc(alias = "FICLONE")]
 pub fn ioctl_ficlone<Fd: AsFd, SrcFd: AsFd>(fd: Fd, src_fd: SrcFd) -> io::Result<()> {
@@ -79,7 +86,8 @@ unsafe impl ioctl::Ioctl for Ficlone<'_> {
     type Output = ();
 
     const IS_MUTATING: bool = false;
-    const OPCODE: ioctl::Opcode = ioctl::Opcode::old(c::FICLONE as ioctl::RawOpcode);
+    const OPCODE: ioctl::Opcode =
+        ioctl::Opcode::old(linux_raw_sys::ioctl::FICLONE as ioctl::RawOpcode);
 
     fn as_ptr(&mut self) -> *mut c::c_void {
         self.0.as_raw_fd() as *mut c::c_void
@@ -139,7 +147,7 @@ bitflags! {
 pub fn ioctl_getflags<Fd: AsFd>(fd: Fd) -> io::Result<IFlags> {
     unsafe {
         #[cfg(target_pointer_width = "32")]
-        let ctl = ioctl::Getter::<ioctl::BadOpcode<{ c::FS_IOC32_GETFLAGS }>, u32>::new();
+        let ctl = ioctl::Getter::<ioctl::BadOpcode<{ linux_raw_sys::ioctl::FS_IOC32_GETFLAGS }>, u32>::new();
         #[cfg(target_pointer_width = "64")]
         let ctl = ioctl::Getter::<ioctl::BadOpcode<{ c::FS_IOC_GETFLAGS }>, u32>::new();
 
@@ -157,7 +165,7 @@ pub fn ioctl_setflags<Fd: AsFd>(fd: Fd, flags: IFlags) -> io::Result<()> {
     unsafe {
         #[cfg(target_pointer_width = "32")]
         let ctl =
-            ioctl::Setter::<ioctl::BadOpcode<{ c::FS_IOC32_SETFLAGS }>, u32>::new(flags.bits());
+            ioctl::Setter::<ioctl::BadOpcode<{ linux_raw_sys::ioctl::FS_IOC32_SETFLAGS }>, u32>::new(flags.bits());
 
         #[cfg(target_pointer_width = "64")]
         let ctl = ioctl::Setter::<ioctl::BadOpcode<{ c::FS_IOC_SETFLAGS }>, u32>::new(flags.bits());
