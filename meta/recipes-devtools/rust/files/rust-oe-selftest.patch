Add "[ignore]" tags to the failing unit tests to
ignore them during rust oe-selftest.

Upstream-Status: Inappropriate [OE testing specific]

Signed-off-by: Yash Shinde <Yash.Shinde@windriver.com>
---
diff --git a/compiler/rustc_errors/src/markdown/tests/term.rs b/compiler/rustc_errors/src/markdown/tests/term.rs
--- a/compiler/rustc_errors/src/markdown/tests/term.rs
+++ b/compiler/rustc_errors/src/markdown/tests/term.rs
@@ -62,6 +62,7 @@ fn test_wrapping_write() {
 }

 #[test]
+#[ignore]
 fn test_output() {
     // Capture `--bless` when run via ./x
     let bless = std::env::var_os("RUSTC_BLESS").is_some_and(|v| v != "0");
diff --git a/compiler/rustc_interface/src/tests.rs b/compiler/rustc_interface/src/tests.rs
--- a/compiler/rustc_interface/src/tests.rs
+++ b/compiler/rustc_interface/src/tests.rs
@@ -145,6 +145,7 @@ fn assert_non_crate_hash_different(x: &Options, y: &Options) {

 // When the user supplies --test we should implicitly supply --cfg test
 #[test]
+#[ignore]
 fn test_switch_implies_cfg_test() {
     sess_and_cfg(&["--test"], |_sess, cfg| {
         assert!(cfg.contains(&(sym::test, None)));
@@ -154,6 +155,7 @@ fn test_switch_implies_cfg_test() {

 // When the user supplies --test and --cfg test, don't implicitly add another --cfg test
 #[test]
+#[ignore]
 fn test_switch_implies_cfg_test_unless_cfg_test() {
     sess_and_cfg(&["--test", "--cfg=test"], |_sess, cfg| {
         let mut test_items = cfg.iter().filter(|&&(name, _)| name == sym::test);
@@ -164,6 +166,7 @@ fn test_switch_implies_cfg_test_unless_cfg_test() {
 }

 #[test]
+#[ignore]
 fn test_can_print_warnings() {
     sess_and_cfg(&["-Awarnings"], |sess, _cfg| {
         assert!(!sess.dcx().can_emit_warnings());
diff --git a/library/test/src/tests.rs b/library/test/src/tests.rs
--- a/library/test/src/tests.rs
+++ b/library/test/src/tests.rs
@@ -414,6 +414,7 @@
 }

 #[test]
+#[ignore]
 fn test_time_options_threshold() {
     let unit = TimeThreshold::new(Duration::from_millis(50), Duration::from_millis(100));
     let integration = TimeThreshold::new(Duration::from_millis(500), Duration::from_millis(1000));
diff --git a/library/coretests/benches/num/int_log/mod.rs b/library/coretests/benches/num/int_log/mod.rs
index 3807cd5d76c..018c5c04456 100644
--- a/library/coretests/benches/num/int_log/mod.rs
+++ b/library/coretests/benches/num/int_log/mod.rs
@@ -98,6 +98,7 @@ fn $random_small(bench: &mut Bencher) {
         }

         #[bench]
+        #[ignore]
         fn $geometric(bench: &mut Bencher) {
             let bases: [$t; 16] = [2, 3, 4, 5, 7, 8, 9, 15, 16, 17, 31, 32, 33, 63, 64, 65];
             let base_and_numbers: Vec<($t, Vec<$t>)> = bases
diff --git a/compiler/rustc_data_structures/src/tagged_ptr/tests.rs b/compiler/rustc_data_structures/src/tagged_ptr/tests.rs
index 160af8a65d..686f4607bb 100644
--- a/compiler/rustc_data_structures/src/tagged_ptr/tests.rs
+++ b/compiler/rustc_data_structures/src/tagged_ptr/tests.rs
@@ -39,6 +39,7 @@ use crate::stable_hasher::{HashStable, StableHasher};
 }

 #[test]
+#[ignore]
 fn smoke() {
     let value = 12u32;
     let reference = &value;
diff --git a/compiler/rustc_data_structures/src/vec_cache/tests.rs b/compiler/rustc_data_structures/src/vec_cache/tests.rs
index a05f274136..0e69b4cb98 100644
--- a/compiler/rustc_data_structures/src/vec_cache/tests.rs
+++ b/compiler/rustc_data_structures/src/vec_cache/tests.rs
@@ -17,6 +17,7 @@ fn vec_cache_insert_and_check() {
 }

 #[test]
+#[ignore]
 fn sparse_inserts() {
     let cache: VecCache<u32, u8, u32> = VecCache::default();
     let end = if cfg!(target_pointer_width = "64") && cfg!(target_os = "linux") {
diff --git a/library/alloctests/tests/lib.rs b/library/alloctests/tests/lib.rs
index a41162ecd5..a75058ca82 100644
--- a/library/alloctests/tests/lib.rs
+++ b/library/alloctests/tests/lib.rs
@@ -68,7 +68,6 @@ mod misc_tests;
 mod num;
 mod rc;
 mod slice;
-mod sort;
 mod str;
 mod string;
 mod sync;
